"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ballGrid = ballGrid;
exports.lines = exports.balls = exports.globalAnimation = exports.globalBg = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _variables = require("../variables");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var globalBg = function globalBg(color) {
  return {
    backgroundColor: color || _variables.PRIMARY_COLOR
  };
};

exports.globalBg = globalBg;

var globalAnimation = function globalAnimation() {
  return {
    animationFillMode: 'both'
  };
};

exports.globalAnimation = globalAnimation;

var balls = function balls(color) {
  return _objectSpread({
    borderRadius: '100%',
    height: _variables.BALL_SIZE,
    margin: _variables.MARGIN,
    width: _variables.BALL_SIZE
  }, globalBg(color));
};

exports.balls = balls;

var lines = function lines(color) {
  return _objectSpread({
    borderRadius: '2px',
    height: _variables.LINE_HEIGHT,
    margin: _variables.MARGIN,
    width: _variables.LINE_WIDTH
  }, globalBg(color));
};

exports.lines = lines;

function ballGrid() {
  var i = 1;
  var grid = {};

  for (; i < 10; i += 1) {
    var delay = parseInt((Math.random() * 100).toString(), 10) / 100 - 0.2;
    var duration = parseInt((Math.random() * 100).toString(), 10) / 100 + 0.6;
    grid[" > div:nth-of-type(".concat(i, ")")] = {
      animationDelay: "".concat(delay, "s"),
      animationDuration: "".concat(duration, "s")
    };
  }

  return grid;
}