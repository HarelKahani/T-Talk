"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _core = require("@emotion/core");

var _mixins = require("../mixins");

var _variables = require("../variables");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var amount = '50px';
var ballTrianglePath1 = (0, _core.keyframes)({
  '100%': {
    transform: 'translate(0px, 0px)'
  },
  '33%': {
    transform: "translate(".concat(parseInt(amount, 10) / 2, "px, -").concat(amount, ")")
  },
  '66%': {
    transform: "translate(".concat(amount, ", 0px)")
  }
});
var ballTrianglePath2 = (0, _core.keyframes)({
  '100%': {
    transform: 'translate(0px, 0px)'
  },
  '33%': {
    transform: "translate(".concat(parseInt(amount, 10) / 2, "px, ").concat(amount, ")")
  },
  '66%': {
    transform: "translate(-".concat(parseInt(amount, 10) / 2, "px, ").concat(amount, ")")
  }
});
var ballTrianglePath3 = (0, _core.keyframes)({
  '100%': {
    transform: 'translate(0px, 0px)'
  },
  '33%': {
    transform: "translate(-".concat(amount, ", 0px)")
  },
  '66%': {
    transform: "translate(-".concat(parseInt(amount, 10) / 2, "px, -").concat(amount, ")")
  }
});

function ballTrianglePath() {
  var animations = [ballTrianglePath1, ballTrianglePath2, ballTrianglePath3];
  var i = 1;
  var grid = {};

  for (; i < 4; i += 1) {
    grid["> div:nth-of-type(".concat(i, ")")] = {
      animationDelay: '0',
      animationDuration: '2s',
      animationIterationCount: 'infinite',
      animationName: animations[i - 1],
      animationTimingFunction: 'ease-in-out'
    };
  }

  return grid;
}

var _default = function _default(color) {
  return _objectSpread({}, ballTrianglePath(), {
    position: 'relative',
    transform: "translate(-".concat(parseInt(amount, 10) / 1.667, "px, -").concat(parseInt(amount, 10) / 1.333, "px)"),
    ' > div': _objectSpread({}, (0, _mixins.balls)(color), {}, (0, _mixins.globalAnimation)(), {
      border: "1px solid ".concat(color || _variables.PRIMARY_COLOR),
      borderRadius: '100%',
      height: '10px',
      position: 'absolute',
      width: '10px',
      '&:nth-of-type(1)': {
        top: amount
      },
      '&:nth-of-type(2)': {
        left: "".concat(parseInt(amount, 10) / 2, "px")
      },
      '&:nth-of-type(3)': {
        left: amount,
        top: amount
      }
    })
  });
};

exports["default"] = _default;