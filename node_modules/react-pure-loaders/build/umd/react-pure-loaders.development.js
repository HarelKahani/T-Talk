(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@emotion/core')) :
  typeof define === 'function' && define.amd ? define(['exports', '@emotion/core'], factory) :
  (global = global || self, factory(global.ReactPureLoader = {}, global.emotion));
}(this, function (exports, core) { 'use strict';

  const PRIMARY_COLOR = '#ffffff';
  const BALL_SIZE = '15px';
  const MARGIN = '2px';
  const LINE_HEIGHT = '35px';
  const LINE_WIDTH = '4px';

  const globalBg = (color) => ({
      backgroundColor: color || PRIMARY_COLOR,
  });
  const globalAnimation = () => ({ animationFillMode: 'both' });
  const balls = (color) => ({
      borderRadius: '100%',
      height: BALL_SIZE,
      margin: MARGIN,
      width: BALL_SIZE,
      ...globalBg(color),
  });
  const lines = (color) => ({
      borderRadius: '2px',
      height: LINE_HEIGHT,
      margin: MARGIN,
      width: LINE_WIDTH,
      ...globalBg(color),
  });
  function ballGrid() {
      let i = 1;
      const grid = {};
      for (; i < 10; i += 1) {
          const delay = ((parseInt((Math.random() * 100).toString(), 10) / 100) - 0.2);
          const duration = ((parseInt((Math.random() * 100).toString(), 10) / 100) + 0.6);
          grid[` > div:nth-of-type(${i})`] = {
              animationDelay: `${delay}s`,
              animationDuration: `${duration}s`,
          };
      }
      return grid;
  }

  const ballBeat = core.keyframes({
      '100%': {
          opacity: 1,
          transform: 'scale(1)',
      },
      '50%': {
          opacity: 0.2,
          transform: 'scale(0.75)',
      },
  });
  var style = (color) => ({
      ' > div': {
          ...balls(color),
          ...globalAnimation(),
          '&:nth-of-type(2n-1)': {
              animationDelay: '-0.35s !important',
          },
          animation: `${ballBeat} 0.7s 0s infinite linear`,
          display: 'inline-block',
      },
  });

  /** @jsx jsx */
  function BallBeat({ color, loading }) {
      if (loading) {
          return (core.jsx("div", { css: style(color) },
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null)));
      }
      return null;
  }

  const rotate = core.keyframes({
      '0%': {
          transform: 'rotate(0deg)',
      },
      '100%': {
          transform: 'rotate(360deg)',
      },
      '50%': {
          transform: 'rotate(180deg)',
      },
  });
  var style$1 = (color) => ({
      ...balls(color),
      ...globalAnimation(),
      animation: `${rotate} 0.75s 0s linear infinite`,
      background: 'transparent !important',
      border: `2px solid ${color || PRIMARY_COLOR}`,
      borderBottomColor: 'transparent',
      display: 'inline-block',
      height: '26px',
      width: '26px',
  });

  /** @jsx jsx */
  function BallClipRotate({ color, loading }) {
      if (loading) {
          return (core.jsx("div", { css: style$1(color) },
              core.jsx("div", null)));
      }
      return null;
  }

  const rotate$1 = core.keyframes({
      '0%': {
          transform: 'rotate(0deg) scale(1)',
      },
      '100%': {
          transform: 'rotate(360deg) scale(1)',
      },
      '50%': {
          transform: 'rotate(180deg) scale(0.6)',
      },
  });
  var style$2 = (color) => ({
      position: 'relative',
      ' > div': {
          ...globalAnimation(),
          animation: `${rotate$1} 1s 0s ease-in-out infinite`,
          border: `2px solid ${color || PRIMARY_COLOR}`,
          borderBottomColor: 'transparent',
          borderRadius: '100%',
          borderTopColor: 'transparent',
          height: '35px',
          left: '-20px',
          position: 'absolute',
          top: '-20px',
          width: '35px',
          '&:last-child': {
              animationDirection: 'reverse',
              animationDuration: '0.5s',
              borderColor: `${color || PRIMARY_COLOR} transparent ${color
                || PRIMARY_COLOR} transparent`,
              display: 'inline-block',
              height: '15px',
              left: '-10px',
              top: '-10px',
              width: '15px',
          },
      },
  });

  /** @jsx jsx */
  function BallClipRotateMultiple({ color, loading }) {
      if (loading) {
          return (core.jsx("div", { css: style$2(color) },
              core.jsx("div", null),
              core.jsx("div", null)));
      }
      return null;
  }

  const rotate$2 = core.keyframes({
      '0%': {
          transform: 'rotate(0deg) scale(1)',
      },
      '100%': {
          transform: 'rotate(360deg) scale(1)',
      },
      '50%': {
          transform: 'rotate(180deg) scale(0.6)',
      },
  });
  const scale = core.keyframes({
      '100%': {
          transform: 'scale(1)',
      },
      '30%': {
          transform: 'scale(0.3)',
      },
  });
  var style$3 = (color) => ({
      position: 'relative',
      transform: 'translateY(-15px)',
      ' > div': {
          ...balls(color),
          ...globalAnimation(),
          borderRadius: '100%',
          left: '0px',
          position: 'absolute',
          top: '0px',
          '&:first-of-type': {
              animation: `${scale} 1s 0s cubic-bezier(.09,.57,.49,.9) infinite`,
              background: color || PRIMARY_COLOR,
              height: '16px',
              left: '-7px',
              top: '7px',
              width: '16px',
          },
          '&:last-child': {
              animation: `${rotate$2} 1s 0s cubic-bezier(.09,.57,.49,.9) infinite`,
              animationDuration: '1s',
              background: 'transparent',
              border: '2px solid',
              borderColor: `${color || PRIMARY_COLOR} transparent ${color
                || PRIMARY_COLOR} transparent`,
              height: '30px',
              left: '-16px',
              position: 'absolute',
              top: '-2px',
              width: '30px',
          },
      },
  });

  /** @jsx jsx */
  function BallClipRotatePulse({ color, loading }) {
      if (loading) {
          return (core.jsx("div", { css: style$3(color) },
              core.jsx("div", null),
              core.jsx("div", null)));
      }
      return null;
  }

  const ballGridBeat = core.keyframes({
      '100%': {
          opacity: 1,
      },
      '50%': {
          opacity: 0.7,
      },
  });
  var style$4 = (color) => ({
      ...ballGrid(),
      width: (parseInt(BALL_SIZE, 10) * 3) + parseInt(MARGIN, 10) * 6,
      ' > div': {
          ...balls(color),
          ...globalAnimation(),
          display: 'inline-block',
          float: 'left',
          animationName: ballGridBeat,
          animationIterationCount: 'infinite',
          animationDelay: '0',
      },
  });

  /** @jsx jsx */
  function BallGridBeat({ color, loading }) {
      if (loading) {
          return (core.jsx("div", { css: style$4(color) },
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null)));
      }
      return null;
  }

  const ballGridPulse = core.keyframes({
      '0%': {
          transform: 'scale(1)',
      },
      '100%': {
          opacity: 1,
          transform: 'scale(1)',
      },
      '50%': {
          opacity: 0.7,
          transform: 'scale(0.5)',
      },
  });
  var style$5 = (color) => ({
      width: (parseInt(BALL_SIZE, 10) * 3) + parseInt(MARGIN, 10) * 6,
      ' > div': {
          ...balls(color),
          ...globalAnimation(),
          animationDelay: '0',
          animationIterationCount: 'infinite',
          animationName: ballGridPulse,
          display: 'inline-block',
          float: 'left',
      },
      ...ballGrid(),
  });

  /** @jsx jsx */
  function BallGridPulse({ color, loading }) {
      if (loading) {
          return (core.jsx("div", { css: style$5(color) },
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null)));
      }
      return null;
  }

  function delay(interval, count, index) {
      return `${((index * parseFloat(interval)) - (parseFloat(interval) * count)).toFixed(2)}s`;
  }

  const scale$1 = core.keyframes({
      '0%': {
          opacity: 1,
          transform: 'scale(1)',
      },
      '45%': {
          opacity: 0.7,
          transform: 'scale(0.1)',
      },
      '80%': {
          opacity: 1,
          transform: 'scale(1)',
      },
  });
  function ballPulse() {
      const n = 3;
      let i = 1;
      const grid = {};
      for (; i < 4; i += 1) {
          grid[`> div:nth-of-type(${i})`] = {
              animation: `${scale$1} 0.75s ${delay('0.12s', n, i)} infinite cubic-bezier(.2,.68,.18,1.08)`,
          };
      }
      return grid;
  }
  var style$6 = (color) => ({
      ...ballPulse(),
      ' > div': {
          ...balls(color),
          ...globalAnimation(),
          display: 'inline-block',
      },
  });

  /** @jsx jsx */
  function BallPulse({ color, loading }) {
      if (loading) {
          return (core.jsx("div", { css: style$6(color) },
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null)));
      }
      return null;
  }

  const riseAmount = '30px';
  const ballPulseRise = core.keyframes({
      '0%': {
          transform: 'scale(1.1)',
      },
      '100%': {
          transform: 'scale(1.0)',
      },
      '25%': {
          transform: `translateY(-${riseAmount})`,
      },
      '50%': {
          transform: 'scale(0.4)',
      },
      '75%': {
          transform: `translateY(${riseAmount})`,
      },
      '99%': {
          transform: 'translateY(0)',
      },
  });
  var style$7 = (color) => ({
      ' > div': {
          ...balls(color),
          ...globalAnimation(),
          animationDelay: '0',
          animationDuration: '1s',
          animationIterationCount: 'infinite',
          animationTimingFunction: 'cubic-bezier(.15,.46,.9,.6)',
          display: 'inline-block',
          '&:nth-of-type(2n)': {
              animationName: ballPulseRise,
          },
          '&:nth-of-type(2n-1)': {
              animationName: ballPulseRise,
          },
      },
  });

  /** @jsx jsx */
  function BallPulseRise({ color, loading }) {
      if (loading) {
          return (core.jsx("div", { css: style$7(color) },
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null)));
      }
      return null;
  }

  const ballPulseRound = core.keyframes({
      '0%': {
          transform: 'scale(0.0)',
      },
      '100%': {
          transform: 'scale(0.0)',
      },
      '40%': {
          transform: 'scale(1.0)',
      },
      '80%': {
          transform: 'scale(0.0)',
      },
  });
  var style$8 = (color) => ({
      ' > div': {
          ...balls(color),
          ...globalAnimation(),
          animation: `${ballPulseRound} 1.2s infinite ease-in-out`,
          height: '10px',
          width: '10px',
      },
  });

  /** @jsx jsx */
  function BallPulseRound({ color, loading }) {
      if (loading) {
          return (core.jsx("div", { css: style$8(color) },
              core.jsx("div", null)));
      }
      return null;
  }

  const amount = '10px';
  const ballPulseSync = core.keyframes({
      '100%': {
          transform: 'translateY(0)',
      },
      '33%': {
          transform: `translateY(${amount})`,
      },
      '66%': {
          transform: `translateY(-${amount})`,
      },
  });
  function ballPulse$1() {
      const n = 3;
      let i = 1;
      const grid = {};
      for (; i < 4; i += 1) {
          grid[`> div:nth-of-type(${i})`] = {
              animation: `${ballPulseSync} 0.6s ${delay('0.07s', n, i)} infinite ease-in-out`,
          };
      }
      return grid;
  }
  var style$9 = (color) => ({
      ...ballPulse$1(),
      ' > div': {
          ...balls(color),
          ...globalAnimation(),
          display: 'inline-block',
      },
  });

  /** @jsx jsx */
  function BallPulseSync({ color, loading }) {
      if (loading) {
          return (core.jsx("div", { css: style$9(color) },
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null)));
      }
      return null;
  }

  const rotate$3 = core.keyframes({
      '0%': {
          transform: 'rotate(0deg) scale(1)',
      },
      '100%': {
          transform: 'rotate(360deg) scale(1)',
      },
      '50%': {
          transform: 'rotate(180deg) scale(.6)',
      },
  });
  var style$a = (color) => ({
      position: 'relative',
      ' > div': {
          ...balls(color),
          ...globalAnimation(),
          position: 'relative',
          '&:first-of-type': {
              animation: `${rotate$3} 1s 0s cubic-bezier(.7,-.13,.22,.86) infinite`,
          },
          '&:before, &:after': {
              ...balls(color),
              content: '\'\'',
              opacity: 0.8,
              position: 'absolute',
          },
          '&:before': {
              left: '-28px',
              top: '0px',
          },
          '&:after': {
              left: '25px',
              top: '0px',
          },
      },
  });

  /** @jsx jsx */
  function BallRotate({ color, loading }) {
      if (loading) {
          return (core.jsx("div", { css: style$a(color) },
              core.jsx("div", null)));
      }
      return null;
  }

  const ballScale = core.keyframes({
      '0%': {
          transform: 'scale(0.0)',
      },
      '100%': {
          opacity: 0,
          transform: 'scale(1.0)',
      },
  });
  var style$b = (color) => ({
      ' > div': {
          ...balls(color),
          ...globalAnimation(),
          animation: `${ballScale} 1s 0s ease-in-out infinite`,
          display: 'inline-block',
          height: '60px',
          width: '60px',
      },
  });

  /** @jsx jsx */
  function BallScale({ color, loading }) {
      if (loading) {
          return (core.jsx("div", { css: style$b(color) },
              core.jsx("div", null)));
      }
      return null;
  }

  const size = '60px';
  const ballScaleMultiple = core.keyframes({
      '0%': {
          opacity: 0,
          transform: 'scale(0.0)',
      },
      '100%': {
          opacity: 0,
          transform: 'scale(1.0)',
      },
      '5%': {
          opacity: 1,
      },
  });
  function ballScale$1() {
      const n = 3;
      let i = 2;
      const grid = {};
      for (; i < 4; i += 1) {
          grid[`> div:nth-of-type(${i})`] = {
              animationDelay: delay('0.2s', n, i),
          };
      }
      return grid;
  }
  var style$c = (color) => ({
      ...ballScale$1(),
      position: 'relative',
      transform: `translateY(-${size} / 2)`,
      ' > div': {
          ...balls(color),
          ...globalAnimation(),
          animation: `${ballScaleMultiple} 1s 0s linear infinite`,
          height: size,
          left: '-30px',
          margin: '0',
          opacity: 0,
          position: 'absolute',
          top: '0px',
          width: size,
      },
  });

  /** @jsx jsx */
  function BallScaleMultiple({ color, loading }) {
      if (loading) {
          return (core.jsx("div", { css: style$c(color) },
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null)));
      }
      return null;
  }

  const ballBeat$1 = core.keyframes({
      '100%': {
          opacity: 1,
          transform: 'scale(1)',
      },
      '50%': {
          opacity: 0.2,
          transform: 'scale(0.75)',
      },
  });
  var style$d = (color) => ({
      ' > div': {
          ...balls(color),
          ...globalAnimation(),
          '&:nth-of-type(2n-1)': {
              animationDelay: '-0.35s',
          },
          animation: `${ballBeat$1} 0.7s 0s infinite linear`,
          backgroundColor: color || PRIMARY_COLOR,
          display: 'inline-block',
      },
  });

  /** @jsx jsx */
  function BallScaleRandom({ color, loading }) {
      if (loading) {
          return (core.jsx("div", { css: style$d(color) },
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null)));
      }
      return null;
  }

  const ballScaleRipple = core.keyframes({
      '0%': {
          opacity: 1,
          transform: 'scale(0.1)',
      },
      '100%': {
          opacity: 0.0,
      },
      '70%': {
          opacity: 0.7,
          transform: 'scale(1)',
      },
  });
  var style$e = (color) => ({
      ' > div': {
          ...globalAnimation(),
          animation: `${ballScaleRipple} 1s 0s infinite cubic-bezier(.21,.53,.56,.8)`,
          border: `2px solid ${color || PRIMARY_COLOR}`,
          borderRadius: '100%',
          height: '50px',
          width: '50px',
      },
  });

  /** @jsx jsx */
  function BallScaleRipple({ color, loading }) {
      if (loading) {
          return (core.jsx("div", { css: style$e(color) },
              core.jsx("div", null)));
      }
      return null;
  }

  const size$1 = '50px';
  const ballScaleRippleMultiple = core.keyframes({
      '0%': {
          opacity: 1,
          transform: 'scale(0.1)',
      },
      '100%': {
          opacity: 0.0,
      },
      '70%': {
          opacity: 0.7,
          transform: 'scale(1)',
      },
  });
  function ballScaleRipple$1() {
      const n = 3;
      let i = 0;
      const grid = {};
      for (; i < 4; i += 1) {
          grid[`> div:nth-of-type(${i})`] = {
              animationDelay: delay('0.2s', n, i - 1),
          };
      }
      return grid;
  }
  var style$f = (color) => ({
      ...ballScaleRipple$1(),
      position: 'relative',
      transform: `translateY(-${parseInt(size$1, 10) / 2})`,
      ' > div': {
          ...globalAnimation(),
          animation: `${ballScaleRippleMultiple} 1.25s 0s infinite cubic-bezier(.21,.53,.56,.8)`,
          border: `2px solid ${color || PRIMARY_COLOR}`,
          borderRadius: '100%',
          height: size$1,
          left: '-26px',
          position: 'absolute',
          top: '-2px',
          width: size$1,
      },
  });

  /** @jsx jsx */
  function BallScaleRippleMultiple({ color, loading }) {
      if (loading) {
          return (core.jsx("div", { css: style$f(color) },
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null)));
      }
      return null;
  }

  const radius = '25px';
  const ballSpinFade = core.keyframes({
      '100%': {
          opacity: 1,
          transform: 'scale(1)',
      },
      '50%': {
          opacity: 0.3,
          transform: 'scale(0.4)',
      },
  });
  function ballSpinFadeLoader() {
      const n = 8;
      let i = 1;
      const grid = {};
      for (; i < 9; i += 1) {
          const quarter = (parseInt(radius, 10) / 2) + (parseInt(radius, 10) / 5.5);
          if (i === 1) {
              grid[`> div:nth-of-type(${i})`] = {
                  animation: `${ballSpinFade} 1s ${delay('0.12s', n, i - 1)} infinite linear`,
                  left: 0,
                  top: radius,
              };
          }
          else if (i === 2) {
              grid[`> div:nth-of-type(${i})`] = {
                  animation: `${ballSpinFade} 1s ${delay('0.12s', n, i - 1)} infinite linear`,
                  left: quarter,
                  top: quarter,
              };
          }
          else if (i === 3) {
              grid[`> div:nth-of-type(${i})`] = {
                  animation: `${ballSpinFade} 1s ${delay('0.12s', n, i - 1)} infinite linear`,
                  left: radius,
                  top: 0,
              };
          }
          else if (i === 4) {
              grid[`> div:nth-of-type(${i})`] = {
                  animation: `${ballSpinFade} 1s ${delay('0.12s', n, i - 1)} infinite linear`,
                  left: quarter,
                  top: `-${quarter}px`,
              };
          }
          else if (i === 5) {
              grid[`> div:nth-of-type(${i})`] = {
                  animation: `${ballSpinFade} 1s ${delay('0.12s', n, i - 1)} infinite linear`,
                  left: 0,
                  top: `-${radius}`,
              };
          }
          else if (i === 6) {
              grid[`> div:nth-of-type(${i})`] = {
                  animation: `${ballSpinFade} 1s ${delay('0.12s', n, i - 1)} infinite linear`,
                  left: `-${quarter}px`,
                  top: `-${quarter}px`,
              };
          }
          else if (i === 7) {
              grid[`> div:nth-of-type(${i})`] = {
                  animation: `${ballSpinFade} 1s ${delay('0.12s', n, i - 1)} infinite linear`,
                  left: `-${radius}`,
                  top: 0,
              };
          }
          else if (i === 8) {
              grid[`> div:nth-of-type(${i})`] = {
                  animation: `${ballSpinFade} 1s ${delay('0.12s', n, i - 1)} infinite linear`,
                  left: `-${quarter}px`,
                  top: quarter,
              };
          }
      }
      return grid;
  }
  var style$g = (color) => ({
      ...ballSpinFadeLoader(),
      left: '-10px',
      position: 'relative',
      top: '-10px',
      ' > div': {
          ...balls(color),
          ...globalAnimation(),
          position: 'absolute',
      },
  });

  /** @jsx jsx */
  function BallSpinFadeLoader({ color, loading }) {
      if (loading) {
          return (core.jsx("div", { css: style$g(color) },
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null)));
      }
      return null;
  }

  const radius$1 = '45px';
  const ballSpin = core.keyframes({
      '100%': {
          opacity: 1,
      },
      '75%': {
          opacity: 0.2,
      },
  });
  function ballSpinLoader() {
      let i = 1;
      const grid = {};
      for (; i < 9; i += 1) {
          const quarter = (parseInt(radius$1, 10) / 2) + (parseInt(radius$1, 10) / 5.5);
          if (i === 1) {
              grid[`> div:nth-of-type(${i})`] = {
                  animation: `${ballSpin} 2s ${(i * 0.9)} infinite linear`,
                  left: 0,
                  top: radius$1,
              };
          }
          else if (i === 2) {
              grid[`> div:nth-of-type(${i})`] = {
                  animation: `${ballSpin} 2s ${(i * 0.9)}s infinite linear`,
                  left: quarter,
                  top: quarter,
              };
          }
          else if (i === 3) {
              grid[`> div:nth-of-type(${i})`] = {
                  animation: `${ballSpin} 2s ${(i * 0.9)}s infinite linear`,
                  left: radius$1,
                  top: 0,
              };
          }
          else if (i === 4) {
              grid[`> div:nth-of-type(${i})`] = {
                  animation: `${ballSpin} 2s ${(i * 0.9)}s infinite linear`,
                  left: quarter,
                  top: `-${quarter}px`,
              };
          }
          else if (i === 5) {
              grid[`> div:nth-of-type(${i})`] = {
                  animation: `${ballSpin} 2s ${(i * 0.9)}s infinite linear`,
                  left: 0,
                  top: `-${radius$1}`,
              };
          }
          else if (i === 6) {
              grid[`> div:nth-of-type(${i})`] = {
                  animation: `${ballSpin} 2s ${(i * 0.9)}s infinite linear`,
                  left: `-${quarter}px`,
                  top: `-${quarter}px`,
              };
          }
          else if (i === 7) {
              grid[`> div:nth-of-type(${i})`] = {
                  animation: `${ballSpin} 2s ${(i * 0.9)}s infinite linear`,
                  left: `-${radius$1}`,
                  top: 0,
              };
          }
          else if (i === 8) {
              grid[`> div:nth-of-type(${i})`] = {
                  animation: `${ballSpin} 2s ${(i * 0.9)}s infinite linear`,
                  left: `-${quarter}px`,
                  top: quarter,
              };
          }
      }
      return grid;
  }
  var style$h = (color) => ({
      ...ballSpinLoader(),
      position: 'relative',
      ' > div': {
          ...globalAnimation(),
          background: color || PRIMARY_COLOR,
          borderRadius: '100%',
          height: '15px',
          position: 'absolute',
          width: '15px',
      },
  });

  /** @jsx jsx */
  function BallSpinLoader({ color, loading }) {
      if (loading) {
          return (core.jsx("div", { css: style$h(color) },
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null)));
      }
      return null;
  }

  const amount$1 = '50px';
  const ballTrianglePath1 = core.keyframes({
      '100%': {
          transform: 'translate(0px, 0px)',
      },
      '33%': {
          transform: `translate(${parseInt(amount$1, 10) / 2}px, -${amount$1})`,
      },
      '66%': {
          transform: `translate(${amount$1}, 0px)`,
      },
  });
  const ballTrianglePath2 = core.keyframes({
      '100%': {
          transform: 'translate(0px, 0px)',
      },
      '33%': {
          transform: `translate(${parseInt(amount$1, 10) / 2}px, ${amount$1})`,
      },
      '66%': {
          transform: `translate(-${parseInt(amount$1, 10) / 2}px, ${amount$1})`,
      },
  });
  const ballTrianglePath3 = core.keyframes({
      '100%': {
          transform: 'translate(0px, 0px)',
      },
      '33%': {
          transform: `translate(-${amount$1}, 0px)`,
      },
      '66%': {
          transform: `translate(-${parseInt(amount$1, 10) / 2}px, -${amount$1})`,
      },
  });
  function ballTrianglePath() {
      const animations = [ballTrianglePath1, ballTrianglePath2, ballTrianglePath3];
      let i = 1;
      const grid = {};
      for (; i < 4; i += 1) {
          grid[`> div:nth-of-type(${i})`] = {
              animationDelay: '0',
              animationDuration: '2s',
              animationIterationCount: 'infinite',
              animationName: animations[i - 1],
              animationTimingFunction: 'ease-in-out',
          };
      }
      return grid;
  }
  var style$i = (color) => ({
      ...ballTrianglePath(),
      position: 'relative',
      transform: `translate(-${parseInt(amount$1, 10) / 1.667}px, -${parseInt(amount$1, 10) / 1.333}px)`,
      ' > div': {
          ...balls(color),
          ...globalAnimation(),
          border: `1px solid ${color || PRIMARY_COLOR}`,
          borderRadius: '100%',
          height: '10px',
          position: 'absolute',
          width: '10px',
          '&:nth-of-type(1)': {
              top: amount$1,
          },
          '&:nth-of-type(2)': {
              left: `${parseInt(amount$1, 10) / 2}px`,
          },
          '&:nth-of-type(3)': {
              left: amount$1,
              top: amount$1,
          },
      },
  });

  /** @jsx jsx */
  function BallTrianglePath({ color, loading }) {
      if (loading) {
          return (core.jsx("div", { css: style$i(color) },
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null)));
      }
      return null;
  }

  const amount$2 = '30px';
  const ballZig = core.keyframes({
      '100%': {
          transform: 'translate(0, 0)',
      },
      '33%': {
          transform: `translate(-${parseInt(amount$2, 10) / 2}px, -${amount$2})`,
      },
      '66%': {
          transform: `translate(${parseInt(amount$2, 10) / 2}px, -${amount$2})`,
      },
  });
  const ballZag = core.keyframes({
      '100%': {
          transform: 'translate(0, 0)',
      },
      '33%': {
          transform: `translate(${parseInt(amount$2, 10) / 2}px, ${amount$2})`,
      },
      '66%': {
          transform: `translate(-${parseInt(amount$2, 10) / 2}px, ${amount$2})`,
      },
  });
  var style$j = (color) => ({
      position: 'relative',
      transform: `translate(-${parseInt(amount$2, 10) / 2}px, -${parseInt(amount$2, 10) / 2}px)`,
      ' > div': {
          ...balls(color),
          ...globalAnimation(),
          left: '-7px',
          marginLeft: (parseInt(amount$2, 10) / 2),
          position: 'absolute',
          top: '4px',
          '&:first-of-type': {
              animation: `${ballZig} 0.7s 0s infinite linear`,
          },
          '&:last-child': {
              animation: `${ballZag} 0.7s 0s infinite linear`,
          },
      },
  });

  /** @jsx jsx */
  function BallZigZag({ color, loading }) {
      if (loading) {
          return (core.jsx("div", { css: style$j(color) },
              core.jsx("div", null),
              core.jsx("div", null)));
      }
      return null;
  }

  const amount$3 = '30px';
  const ballZigDeflect = core.keyframes({
      '100%': {
          transform: 'translate(0, 0)',
      },
      '17%': {
          transform: `translate(-${parseInt(amount$3, 10) / 2}px, -${amount$3})`,
      },
      '34%': {
          transform: `translate(${parseInt(amount$3, 10) / 2}px, -${amount$3})`,
      },
      '50%': {
          transform: 'translate(0, 0)',
      },
      '67%': {
          transform: `translate(${parseInt(amount$3, 10) / 2}px, -${amount$3})`,
      },
      '84%': {
          transform: `translate(-${parseInt(amount$3, 10) / 2}px, -${amount$3})`,
      },
  });
  const ballZagDeflect = core.keyframes({
      '100%': {
          transform: 'translate(0, 0)',
      },
      '17%': {
          transform: `translate(${parseInt(amount$3, 10) / 2}px, ${amount$3})`,
      },
      '34%': {
          transform: `translate(-${parseInt(amount$3, 10) / 2}px, ${amount$3})`,
      },
      '50%': {
          transform: 'translate(0, 0)',
      },
      '67%': {
          transform: `translate(-${parseInt(amount$3, 10) / 2}px, ${amount$3})`,
      },
      '84%': {
          transform: `translate(${parseInt(amount$3, 10) / 2}px, ${amount$3})`,
      },
  });
  var style$k = (color) => ({
      position: 'relative',
      transform: `translate(-${parseInt(amount$3, 10) / 2}px, -${parseInt(amount$3, 10) / 2}px)`,
      ' > div': {
          ...balls(color),
          ...globalAnimation(),
          left: '-7px',
          marginLeft: (parseInt(amount$3, 10) / 2),
          position: 'absolute',
          top: '4px',
          '&:first-of-type': {
              animation: `${ballZigDeflect} 1.5s 0s infinite linear`,
          },
          '&:last-child': {
              animation: `${ballZagDeflect} 1.5s 0s infinite linear`,
          },
      },
  });

  /** @jsx jsx */
  function BallZigZagDeflect({ color, loading }) {
      if (loading) {
          return (core.jsx("div", { css: style$k(color) },
              core.jsx("div", null),
              core.jsx("div", null)));
      }
      return null;
  }

  const ballBeat$2 = core.keyframes({
      '0%': {
          transform: 'scaley(1.0)',
      },
      '100%': {
          transform: 'scaley(1.0)',
      },
      '50%': {
          transform: 'scaley(0.4)',
      },
  });
  function lineScale() {
      const n = 5;
      let i = 1;
      const grid = {};
      for (; i < 10; i += 1) {
          grid[`> div:nth-of-type(${i})`] = {
              animation: `${ballBeat$2} 1s ${delay('0.1s', n, i)} infinite cubic-bezier(.2,.68,.18,1.08)`,
          };
      }
      return grid;
  }
  var style$l = (color) => ({
      ...lineScale(),
      ' > div': {
          ...lines(color),
          ...globalAnimation(),
          display: 'inline-block',
      },
  });

  /** @jsx jsx */
  function LineScale({ color, loading }) {
      if (loading) {
          return (core.jsx("div", { css: style$l(color) },
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null)));
      }
      return null;
  }

  const ballBeat$3 = core.keyframes({
      '100%': {
          opacity: 1,
          transform: 'scale(1)',
      },
      '50%': {
          opacity: 0.2,
          transform: 'scale(0.75)',
      },
  });
  var style$m = (color) => ({
      ' > div': {
          ...balls(color),
          ...globalAnimation(),
          '&:nth-of-type(2n-1)': {
              animationDelay: '-0.35s',
          },
          animation: `${ballBeat$3} 0.7s 0s infinite linear`,
          backgroundColor: color || PRIMARY_COLOR,
          display: 'inline-block',
      },
  });

  /** @jsx jsx */
  function LineScaleParty({ color, loading }) {
      if (loading) {
          return (core.jsx("div", { css: style$m(color) },
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null)));
      }
      return null;
  }

  const lineScalePulseOut = core.keyframes({
      '0%': {
          transform: 'scaley(1.0)',
      },
      '100%': {
          transform: 'scaley(1.0)',
      },
      '50%': {
          transform: 'scaley(0.4)',
      },
  });
  var style$n = (color) => ({
      ' > div': {
          ...lines(color),
          ...globalAnimation(),
          animation: `${lineScalePulseOut} 0.9s ${delay('0.2s', 3, 0)} infinite cubic-bezier(.85,.25,.37,.85)`,
          display: 'inline-block',
          '&:nth-of-type(2), &:nth-of-type(4)': {
              animationDelay: `${delay('0.2s', 3, 1)} !important`,
          },
          '&:nth-of-type(1), &:nth-of-type(5)': {
              animationDelay: `${delay('0.2s', 3, 2)} !important`,
          },
      },
  });

  /** @jsx jsx */
  function LineScalePulseOut({ color, loading }) {
      if (loading) {
          return (core.jsx("div", { css: style$n(color) },
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null)));
      }
      return null;
  }

  const lineScalePulseOutRapid = core.keyframes({
      '0%': {
          transform: 'scaley(1.0)',
      },
      '80%': {
          transform: 'scaley(0.3)',
      },
      '90%': {
          transform: 'scaley(1.0)',
      },
  });
  var style$o = (color) => ({
      ' > div': {
          ...lines(color),
          ...globalAnimation(),
          animation: `${lineScalePulseOutRapid} 0.9s -0.5s infinite cubic-bezier(.11,.49,.38,.78)`,
          display: 'inline-block',
          verticalAlign: 'middle',
          '&:nth-of-type(2), &:nth-of-type(4)': {
              animationDelay: '-0.25s !important',
          },
          '&:nth-of-type(1), &:nth-of-type(5)': {
              animationDelay: '0s !important',
          },
      },
  });

  /** @jsx jsx */
  function LineScalePulseOutRapid({ color, loading }) {
      if (loading) {
          return (core.jsx("div", { css: style$o(color) },
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null)));
      }
      return null;
  }

  const random = 0.5;
  const ballBeat$4 = core.keyframes({
      '0%': {
          transform: 'scale(1.0)',
      },
      '100%': {
          transform: 'scale(1.0)',
      },
      '50%': {
          transform: `scale(${random})`,
      },
  });
  var style$p = (color) => ({
      ...ballGrid(),
      ' > div': {
          ...lines(color),
          ...globalAnimation(),
          animationDelay: '0',
          animationIterationCount: 'infinite',
          animationName: ballBeat$4,
          display: 'inline-block',
      },
  });

  /** @jsx jsx */
  // eslint-disable-next-line @typescript-eslint/explicit-function-return-type
  function LineScaleRandom({ color, loading }) {
      if (loading) {
          return (core.jsx("div", { css: style$p(color) },
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null)));
      }
      return null;
  }

  const radius$2 = '20px';
  const lineSpinFade = core.keyframes({
      '100%': {
          opacity: 1,
      },
      '50%': {
          opacity: 0.3,
      },
  });
  function lineSpinFadeLoader() {
      const n = 8;
      let i = 1;
      const grid = {};
      for (; i < 9; i += 1) {
          const quarter = (parseInt(radius$2, 10) / 2) + (parseInt(radius$2, 10) / 5.5);
          if (i === 1) {
              grid[`> div:nth-of-type(${i})`] = {
                  animation: `${lineSpinFade} 1.2s ${delay('0.12s', n, i)} infinite ease-in-out`,
                  left: 0,
                  top: radius$2,
              };
          }
          else if (i === 2) {
              grid[`> div:nth-of-type(${i})`] = {
                  animation: `${lineSpinFade} 1.2s ${delay('0.12s', n, i)} infinite ease-in-out`,
                  left: quarter,
                  top: quarter,
                  transform: 'rotate(-45deg)',
              };
          }
          else if (i === 3) {
              grid[`> div:nth-of-type(${i})`] = {
                  animation: `${lineSpinFade} 1.2s ${delay('0.12s', n, i)} infinite ease-in-out`,
                  left: radius$2,
                  top: 0,
                  transform: 'rotate(90deg)',
              };
          }
          else if (i === 4) {
              grid[`> div:nth-of-type(${i})`] = {
                  animation: `${lineSpinFade} 1.2s ${delay('0.12s', n, i)} infinite ease-in-out`,
                  left: quarter,
                  top: `-${quarter}`,
                  transform: 'rotate(45deg)',
              };
          }
          else if (i === 5) {
              grid[`> div:nth-of-type(${i})`] = {
                  animation: `${lineSpinFade} 1.2s ${delay('0.12s', n, i)} infinite ease-in-out`,
                  left: '0',
                  top: `-${radius$2}`,
              };
          }
          else if (i === 6) {
              grid[`> div:nth-of-type(${i})`] = {
                  animation: `${lineSpinFade} 1.2s ${delay('0.12s', n, i)} infinite ease-in-out`,
                  left: `-${quarter}`,
                  top: `-${quarter}`,
                  transform: 'rotate(-45deg)',
              };
          }
          else if (i === 7) {
              grid[`> div:nth-of-type(${i})`] = {
                  animation: `${lineSpinFade} 1.2s ${delay('0.12s', n, i)} infinite ease-in-out`,
                  left: `-${radius$2}`,
                  top: '0',
                  transform: 'rotate(90deg)',
              };
          }
          else if (i === 8) {
              grid[`> div:nth-of-type(${i})`] = {
                  animation: `${lineSpinFade} 1.2s ${delay('0.12s', n, i)} infinite ease-in-out`,
                  left: `-${quarter}`,
                  top: quarter,
                  transform: 'rotate(45deg)',
              };
          }
      }
      return grid;
  }
  var style$q = (color) => ({
      ...lineSpinFadeLoader(),
      left: '-4px',
      position: 'relative',
      top: '-10px',
      ' > div': {
          ...lines(color),
          ...globalAnimation(),
          height: '15px',
          position: 'absolute',
          width: '5px',
      },
  });

  /** @jsx jsx */
  function LineSpinFadeLoader({ color, loading }) {
      if (loading) {
          return (core.jsx("div", { css: style$q(color) },
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null)));
      }
      return null;
  }

  const amount$4 = '50px';
  const size$2 = '10px';
  const ballBeat$5 = core.keyframes({
      '100%': {
          transform: 'rotate(-360deg)',
      },
      '25%': {
          transform: `translateX(${amount$4}) scale(0.5) rotate(-90deg)`,
      },
      '50%': {
          transform: `translate(${amount$4}, ${amount$4}) rotate(-180deg)`,
      },
      '75%': {
          transform: `translateY(${amount$4}) scale(0.5) rotate(-270deg)`,
      },
  });
  var style$r = (color) => ({
      position: 'relative',
      transform: `translate(-${parseInt(amount$4, 10) / 2}, -${parseInt(amount$4, 10) / 2})`,
      ' > div': {
          ...globalAnimation(),
          animation: `${ballBeat$5} 1.6s 0s infinite ease-in-out`,
          backgroundColor: color || PRIMARY_COLOR,
          height: size$2,
          left: '-5px',
          position: 'absolute',
          top: '-5px',
          width: size$2,
          '&:last-child': {
              animationDelay: '-0.8s',
          },
      },
  });

  /** @jsx jsx */
  function CubeTransition({ color, loading }) {
      if (loading) {
          return (core.jsx("div", { css: style$r(color) },
              core.jsx("div", null),
              core.jsx("div", null)));
      }
      return null;
  }

  const size$3 = '25px';
  const rotatePacmanHalfUp = core.keyframes({
      '0%': {
          transform: 'rotate(270deg)',
      },
      '100%': {
          transform: 'rotate(270deg)',
      },
      '50%': {
          transform: 'rotate(360deg)',
      },
  });
  const rotatePacmanHalfDown = core.keyframes({
      '0%': {
          transform: 'rotate(90deg)',
      },
      '100%': {
          transform: 'rotate(90deg)',
      },
      '50%': {
          transform: 'rotate(0deg)',
      },
  });
  const pacmanBalls = core.keyframes({
      '100%': {
          transform: `translate(-${4 * parseInt(size$3, 10)}px, -${parseInt(size$3, 10) / 4}px)`,
      },
      '75%': {
          opacity: 0.7,
      },
  });
  const pacmanDesign = (color) => ({
      borderBottom: `${size$3} solid ${color || PRIMARY_COLOR}`,
      borderLeft: `${size$3} solid ${color || PRIMARY_COLOR}`,
      borderRadius: size$3,
      borderRight: `${size$3} solid transparent`,
      borderTop: `${size$3} solid ${color || PRIMARY_COLOR}`,
      height: '0px',
      width: '0px',
  });
  function ballPlacement() {
      const n = 3;
      let i = 0;
      const grid = {};
      for (; i < 4; i += 1) {
          grid[`> div:nth-of-type(${i + 2})`] = {
              animation: `${pacmanBalls} 1s ${delay('.33s', n, i)} infinite linear`,
          };
      }
      return grid;
  }
  var style$s = (color) => ({
      ...ballPlacement(),
      position: 'relative',
      ' > div:first-of-type': {
          ...pacmanDesign(color),
          animation: `${rotatePacmanHalfUp} 0.5s 0s infinite`,
          left: '-30px',
          position: 'relative',
      },
      ' > div:nth-of-type(2)': {
          ...pacmanDesign(color),
          animation: `${rotatePacmanHalfDown} 0.5s 0s infinite`,
          left: '-30px',
          marginTop: (-2 * parseInt(size$3, 10)),
          position: 'relative',
      },
      ' > div:nth-of-type(3), > div:nth-of-type(4), > div:nth-of-type(5), > div:nth-of-type(6)': {
          ...balls(color),
          height: '10px',
          left: '70px',
          position: 'absolute',
          top: '25px',
          transform: `translate(0,-${parseInt(size$3, 10) / 4}px)`,
          width: '10px',
      },
  });

  /** @jsx jsx */
  function Pacman({ color, loading }) {
      if (loading) {
          return (core.jsx("div", { css: style$s(color) },
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null),
              core.jsx("div", null)));
      }
      return null;
  }

  const size$4 = '35px';
  const pos = 30;
  const spinRotate = core.keyframes({
      '0%': {
          transform: 'rotate(0deg)',
      },
      '100%': {
          transform: 'rotate(360deg)',
      },
      '50%': {
          transform: 'rotate(180deg)',
      },
  });
  var style$t = (color) => ({
      height: size$4,
      overflow: 'hidden',
      position: 'relative',
      width: size$4,
      ' > div': {
          ...globalAnimation(),
          animation: `${spinRotate} 0.6s 0s infinite linear`,
          backgroundImage: `linear-gradient(transparent 0%, transparent ${(100 - pos)}%, ${color || PRIMARY_COLOR} ${pos}%, ${color || PRIMARY_COLOR} 100%)`,
          borderRadius: '100%',
          borderWidth: '0px',
          height: '100%',
          position: 'absolute',
          width: '100%',
      },
  });

  /** @jsx jsx */
  function SemiCircleSpin({ color, loading }) {
      if (loading) {
          return (core.jsx("div", { css: style$t(color) },
              core.jsx("div", null)));
      }
      return null;
  }

  const squareSpin = core.keyframes({
      '100%': {
          transform: 'perspective(100px) rotateX(0) rotateY(0)',
      },
      '25%': {
          transform: 'perspective(100px) rotateX(180deg) rotateY(0)',
      },
      '50%': {
          transform: 'perspective(100px) rotateX(180deg) rotateY(180deg)',
      },
      '75%': {
          transform: 'perspective(100px) rotateX(0) rotateY(180deg)',
      },
  });
  var style$u = (color) => ({
      ' > div': {
          ...globalAnimation(),
          animation: `${squareSpin} 3s 0s cubic-bezier(.09,.57,.49,.9) infinite`,
          background: color || PRIMARY_COLOR,
          height: '50px',
          width: '50px',
      },
  });

  /** @jsx jsx */
  function SquareSpin({ color, loading }) {
      if (loading) {
          return (core.jsx("div", { css: style$u(color) },
              core.jsx("div", null)));
      }
      return null;
  }

  const size$5 = '20px';
  const triangleSkewSpin = core.keyframes({
      '100%': {
          transform: 'perspective(100px) rotateX(0) rotateY(0)',
      },
      '25%': {
          transform: 'perspective(100px) rotateX(180deg) rotateY(0)',
      },
      '50%': {
          transform: 'perspective(100px) rotateX(180deg) rotateY(180deg)',
      },
      '75%': {
          transform: 'perspective(100px) rotateX(0) rotateY(180deg)',
      },
  });
  var style$v = (color) => ({
      ' > div': {
          ...globalAnimation(),
          animation: `${triangleSkewSpin} 3s 0s cubic-bezier(.09,.57,.49,.9) infinite`,
          borderBottom: `${size$5} solid ${color || PRIMARY_COLOR}`,
          borderLeft: `${size$5} solid transparent`,
          borderRight: `${size$5} solid transparent`,
          height: '0',
          width: '0',
      },
  });

  /** @jsx jsx */
  function TriangleSkewSpin({ color, loading }) {
      if (loading) {
          return (core.jsx("div", { css: style$v(color) },
              core.jsx("div", null)));
      }
      return null;
  }

  exports.BallBeat = BallBeat;
  exports.BallClipRotate = BallClipRotate;
  exports.BallClipRotateMultiple = BallClipRotateMultiple;
  exports.BallClipRotatePulse = BallClipRotatePulse;
  exports.BallGridBeat = BallGridBeat;
  exports.BallGridPulse = BallGridPulse;
  exports.BallPulse = BallPulse;
  exports.BallPulseRise = BallPulseRise;
  exports.BallPulseRound = BallPulseRound;
  exports.BallPulseSync = BallPulseSync;
  exports.BallRotate = BallRotate;
  exports.BallScale = BallScale;
  exports.BallScaleMultiple = BallScaleMultiple;
  exports.BallScaleRandom = BallScaleRandom;
  exports.BallScaleRipple = BallScaleRipple;
  exports.BallScaleRippleMultiple = BallScaleRippleMultiple;
  exports.BallSpinFadeLoader = BallSpinFadeLoader;
  exports.BallSpinLoader = BallSpinLoader;
  exports.BallTrianglePath = BallTrianglePath;
  exports.BallZigZag = BallZigZag;
  exports.BallZigZagDeflect = BallZigZagDeflect;
  exports.CubeTransition = CubeTransition;
  exports.LineScale = LineScale;
  exports.LineScaleParty = LineScaleParty;
  exports.LineScalePulseOut = LineScalePulseOut;
  exports.LineScalePulseOutRapid = LineScalePulseOutRapid;
  exports.LineScaleRandom = LineScaleRandom;
  exports.LineSpinFadeLoader = LineSpinFadeLoader;
  exports.Pacman = Pacman;
  exports.SemiCircleSpin = SemiCircleSpin;
  exports.SquareSpin = SquareSpin;
  exports.TriangleSkewSpin = TriangleSkewSpin;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
