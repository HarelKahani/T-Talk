import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { keyframes } from '@emotion/core';
import { globalAnimation } from '../mixins';
import { PRIMARY_COLOR } from '../variables';
var radius = '45px';
var ballSpin = keyframes({
  '100%': {
    opacity: 1
  },
  '75%': {
    opacity: 0.2
  }
});

function ballSpinLoader() {
  var i = 1;
  var grid = {};

  for (; i < 9; i += 1) {
    var quarter = parseInt(radius, 10) / 2 + parseInt(radius, 10) / 5.5;

    if (i === 1) {
      grid["> div:nth-of-type(".concat(i, ")")] = {
        animation: "".concat(ballSpin, " 2s ").concat(i * 0.9, " infinite linear"),
        left: 0,
        top: radius
      };
    } else if (i === 2) {
      grid["> div:nth-of-type(".concat(i, ")")] = {
        animation: "".concat(ballSpin, " 2s ").concat(i * 0.9, "s infinite linear"),
        left: quarter,
        top: quarter
      };
    } else if (i === 3) {
      grid["> div:nth-of-type(".concat(i, ")")] = {
        animation: "".concat(ballSpin, " 2s ").concat(i * 0.9, "s infinite linear"),
        left: radius,
        top: 0
      };
    } else if (i === 4) {
      grid["> div:nth-of-type(".concat(i, ")")] = {
        animation: "".concat(ballSpin, " 2s ").concat(i * 0.9, "s infinite linear"),
        left: quarter,
        top: "-".concat(quarter, "px")
      };
    } else if (i === 5) {
      grid["> div:nth-of-type(".concat(i, ")")] = {
        animation: "".concat(ballSpin, " 2s ").concat(i * 0.9, "s infinite linear"),
        left: 0,
        top: "-".concat(radius)
      };
    } else if (i === 6) {
      grid["> div:nth-of-type(".concat(i, ")")] = {
        animation: "".concat(ballSpin, " 2s ").concat(i * 0.9, "s infinite linear"),
        left: "-".concat(quarter, "px"),
        top: "-".concat(quarter, "px")
      };
    } else if (i === 7) {
      grid["> div:nth-of-type(".concat(i, ")")] = {
        animation: "".concat(ballSpin, " 2s ").concat(i * 0.9, "s infinite linear"),
        left: "-".concat(radius),
        top: 0
      };
    } else if (i === 8) {
      grid["> div:nth-of-type(".concat(i, ")")] = {
        animation: "".concat(ballSpin, " 2s ").concat(i * 0.9, "s infinite linear"),
        left: "-".concat(quarter, "px"),
        top: quarter
      };
    }
  }

  return grid;
}

export default (function (color) {
  return _objectSpread({}, ballSpinLoader(), {
    position: 'relative',
    ' > div': _objectSpread({}, globalAnimation(), {
      background: color || PRIMARY_COLOR,
      borderRadius: '100%',
      height: '15px',
      position: 'absolute',
      width: '15px'
    })
  });
});